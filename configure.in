dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.53)

AC_INIT(jxta-c, 2.5.1)
AC_CONFIG_SRCDIR(configure.in)
AC_CONFIG_AUX_DIR(conftools)
AC_CANONICAL_TARGET

dnl 
dnl Include our M4 macros
dnl 
sinclude(libjxta.m4)


AM_INIT_AUTOMAKE(dist-bzip2 dist-zip)

AC_CONFIG_HEADERS(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL

# Check for mono tools
AC_PATH_PROG(GMCS, gmcs)
AC_PATH_PROG(MONO, mono)

dnl Generate ./config.nice for reproducing runs of configure
dnl
JXTA_CONFIG_NICE(config.nice)


# Here is an example test for a certain header
# foo.h that is not in the path that we might want in the 
# path.  Various other things can be done such as testing
# for environment variables, etc. 
#
# Note that the following example does not really work, since it
# only searches within the system includes.
#
# AC_CHECK_HEADER(apr/include/os.h,[
#echo "GOT IT" 
#],[
#echo "The APR package has not been installed. Please refer to BUILD in"
#echo "order to properly install it."
#exit 0
#])

AC_CHECK_LIB(expat,XML_ParserCreate,[],[
 echo "The expat library for XML processing is required by JXTA" 
 exit 0
])

#AC_CHECK_LIB(crypto,BN_new,[],[
#    echo "The OpenSSL library for basic cryptographic functions is required by JXTA" 
#    exit 0
#])

case $host_os in
  solaris*)
    AC_CHECK_LIB(socket,getaddrinfo,[],[
     echo "The socket library for emulation of BSD Sockets is required by JXTA"
     exit 0
    ])
    ;;
  darwin*)
    ;;
  *)
#    AC_CHECK_LIB(crypt,crypt_r,[],[
#     echo "The crypt library for basic cryptographic functions is required by JXTA" 
#     exit 0
#    ])
    ;;
esac

AC_ARG_ENABLE([mono],
  AC_HELP_STRING([--enable-mono], [Enable Mono support.]),
  [ac_enable_mono=$enableval], [ac_enable_mono=notset])

if test "x$ac_enable_mono" = "xyes" ; then
  GMCS_FLAGS="$GMCS_FLAGS"
  MONO_FLAGS="$MONO_FLAGS"
  CS_DIR="jxta.net"
fi

if test "x$ac_enable_mono" = "xnotset" ; then
  if test "x$ac_cv_path_MONO" != "x" ; then
    if test "x$ac_cv_path_GMCS" != "x" ; then
      ac_enable_mono=yes
      GMCS_FLAGS="$GMCS_FLAGS"
      MONO_FLAGS="$MONO_FLAGS"
      CS_DIR="jxta.net"
    else
      ac_enable_mono=no
    fi
  else
    ac_enable_mono=no
  fi
fi

AC_SUBST(CS_DIR)
AC_SUBST(GMCS_FLAGS)
AC_SUBST(MONO_FLAGS)

AC_ARG_ENABLE([debug],
  AC_HELP_STRING([--enable-debug], [Enable JXTA_LOG debugging display.]),
  [ac_enable_debug=$enableval], [ac_enable_debug=no])

if test "x$ac_enable_debug" = "xyes" ; then
  CPPFLAGS="-DJXTA_LOG_ENABLE=1 $CPPFLAGS"
fi

AC_ARG_ENABLE([compression],
  AC_HELP_STRING([--enable-compression], [Enable SRDI zlib compression.]),
  [ac_enable_compression=$enableval], [ac_enable_compression=yes])

if test "x$ac_enable_compression" = "xyes" ; then
  CPPFLAGS="-DGZIP_ENABLED=1 $CPPFLAGS"
fi

AC_ARG_ENABLE([decompression],
  AC_HELP_STRING([--enable-decompression], [Enable SRDI zlib decompression.]),
  [ac_enable_decompression=$enableval], [ac_enable_decompression=yes])

if test "x$ac_enable_decompression" = "xyes" ; then
  CPPFLAGS="-DGUNZIP_ENABLED=1 $CPPFLAGS"
fi

AC_ARG_ENABLE([object-tracking],
  AC_HELP_STRING([--enable-object-tracking], [enable object tracking logs]),
  [ac_enable_object_tracking=$enableval], [ac_enable_object_tracking=no])

if test "x$ac_enable_object_tracking" != "xno" ; then
  CPPFLAGS="-DJXTA_OBJECT_TRACKING_ENABLE=1 $CPPFLAGS"
fi

AC_ARG_ENABLE([object-checking],
  AC_HELP_STRING([--enable-object-checking], [enable object check valid macro]),
  [ac_enable_object_checking=$enableval], [ac_enable_object_checking=no])

if test "x$ac_enable_object_checking" != "xno" ; then
  CPPFLAGS="-DJXTA_OBJECT_CHECKING_ENABLE=1 $CPPFLAGS"
fi

AC_ARG_WITH(apr, 
  AC_HELP_STRING([--with-apr],
    [Specify the location of APR/APU to use.]),
  [with_apr=$withval], [with_apr=no])

case "$with_apr" in
  yes)
    apr_prefix="`pwd`/lib/apr"
    ;;
  no | apr-config)
    apr_prefix=""
    ;;
  *)
    apr_prefix=$with_apr
    ;;
esac

if test -z $apr_prefix ; then
  AC_PATH_PROG(apr_config, apr-1-config, "")
else
  AC_PATH_PROG(apr_config, apr-1-config, "", [$apr_prefix/bin])
fi

if ! test -f "$apr_config" ; then
  echo "Cannot find apr-1-config, apr must be installed to build JXTA"
  exit 0
fi 

apr_prefix="`$apr_config --prefix`"

AC_ARG_WITH(apu,
  AC_HELP_STRING([--with-apu],
    [Specify the location of APU to use.]),
  [with_apu=$withval], [with_apu=no])
  
case "$with_apu" in
  yes)
    apu_prefix="`pwd`/lib/apr-util"
    ;;
  no | apu-config)
    apu_prefix=""
    ;;
  *)
    apu_prefix=$with_apu
    ;;
esac

if test -z $apu_prefix ; then
  AC_PATH_PROG(apu_config, apu-1-config, "", [$apr_prefix/bin:$PATH])
else
  AC_PATH_PROG(apu_config, apu-1-config, "", [$apu_prefix/bin])
fi

if ! test -f "$apu_config" ; then
  echo "Cannot find apu-1-config, apr-util must be installed to build JXTA"
  exit 0
fi

apu_prefix="`$apu_config --prefix`"

apr_cppflags=`$apr_config --cppflags --includes`
apr_libs=`$apr_config --link-ld`

apu_cppflags=`$apu_config --includes`
apu_libs=`$apu_config --link-ld`

APR_CPPFLAGS="$apr_cppflags $apu_cppflags"
APR_LIBS="$apr_libs $apu_libs"

AC_SUBST(APR_CPPFLAGS)
AC_SUBST(APR_LIBS)

CFLAGS="`$apr_config --cflags` $CFLAGS"

dnl The modified libxml2 lib sits in the lib directory

AC_ARG_WITH(libxml2, 
  AC_HELP_STRING([--with-libxml2],
    [Specify the location of libxml2 to use.]),
  [with_libxml2=$withval], [with_libxml2=no])

case "$with_libxml2" in
  yes)
    xml2_prefix="`pwd`/lib/libxml2/libxml2-2.6.19"
    ;;
  no | libxml2-config)
    xml2_prefix=""
    ;;
  *)
    xml2_prefix=$with_libxml2
    ;;
esac

if test -z "$xml2_prefix" ; then  
  AC_PATH_PROG(xml2_config, xml2-config, "")
else
  AC_PATH_PROG(xml2_config, xml2-config, "", [$xml2_prefix/bin])
fi 

if test -z "$xml2_config" ; then
  echo "Cannot find xml2-config, libxml2 must be installed to build JXTA"
  exit 0
fi 

xml2_prefix="`$xml2_config --prefix`"
xml2_cppflags=" `$xml2_config --cflags` "
XML2_CPPFLAGS=$xml2_cppflags
xml2_libs=" `$xml2_config --libs` "
XML2_LIBS=$xml2_libs

AC_SUBST(XML2_CPPFLAGS)
AC_SUBST(XML2_LIBS)

dnl SQLite

AC_ARG_WITH(sqlite, 
  AC_HELP_STRING([--with-sqlite],
    [Specify the location of SQLite to use.]),
  [with_sqlite=$withval], [with_sqlite=no])

case "$with_sqlite" in
  no)
    sqlite_prefix=""
    ;;
  *)
    sqlite_prefix=$with_sqlite
    ;;
esac

if test -n "$sqlite_prefix" ; then
  sqlite_cflags=" -I$sqlite_prefix/include "
  sqlite_libs=" -L$sqlite_prefix/lib -lsqlite3 "
else
  sqlite_cflags=" `pkg-config sqlite3 --cflags` "
  sqlite_libs=" `pkg-config sqlite3 --libs` "
  sqlite_prefix="`pkg-config --variable=prefix sqlite3`"
fi 

SQLITE_CPPFLAGS="$sqlite_cflags"
SQLITE_LIBS="$sqlite_libs"

dnl OpenSSL

AC_ARG_WITH(openssl, 
  AC_HELP_STRING([--with-openssl],
    [Specify the location of openssl lib to use.]),
  [with_openssl=$withval], [with_openssl=no])

case "$with_openssl" in
  no)
    openssl_prefix=""
    ;;
  *)
    openssl_prefix=$with_openssl
    ;;
esac

if test -n "$openssl_prefix" ; then
  openssl_cflags=" -I$openssl_prefix/include "
  openssl_libs=" -L$openssl_prefix/lib -lcrypto"
else
  openssl_cflags=" `pkg-config openssl --cflags` "
  openssl_libs=" `pkg-config openssl --libs` "
  openssl_prefix="`pkg-config --variable=prefix openssl`"
fi 

SQLITE_CPPFLAGS="$SQLITE_CPPFLAGS $openssl_cflags"
SQLITE_LIBS="$SQLITE_LIBS $openssl_libs"

AC_SUBST(SQLITE_CPPFLAGS)
AC_SUBST(SQLITE_LIBS)

AM_PROG_LIBTOOL

dnl Test SQLite3 support in apr-util
AC_MSG_CHECKING([apr-util supports SQLite3])
old_ac_cpp=$ac_cpp
ac_cpp="$ac_cpp $apu_cppflags"
AC_EGREP_CPP(apu_have_sqlite3, [
#include <apu.h>
#if (APU_HAVE_SQLITE3 == 1)
apu_have_sqlite3
#endif
], [apu_have_sqlite3=yes], [apu_have_sqlite3=no])
ac_cpp=$old_ac_cpp
AC_MSG_RESULT(${apu_have_sqlite3})
if test ${apu_have_sqlite3} = "no"; then
   AC_MSG_ERROR([apr-util does not support SQLite3, as required by JXTA])
fi

dnl Test if apr_thread_pool is in the apr-util lib
oldld=$LDFLAGS
oldcpp=$CPPFLAGS
CPPFLAGS=$APR_CPPFLAGS
LDFLAGS="$LDFLAGS $APR_LIBS"
AC_CHECK_HEADERS([apr_thread_pool.h], [
  AC_CHECK_FUNC(apr_thread_pool_create, [apr_threadpool=1], [apr_threadpool=0]) 
], [apr_threadpool=0])
LDFLAGS=$oldld
CPPFLAGS=$oldcpp
AM_CONDITIONAL(APR_THREADPOOL, test x$apr_threadpool = x1)
AC_SUBST(apr_threadpool)

dnl libjxta.m4 has definitions for supporting automatic "jxta-config"
dnl shell scripts.  When that file is read in (how?), the following
dnl macro should automatically create it.
dnl AC_CREATE_GENERIC_CONFIG

AC_OUTPUT([Makefile src/Makefile src/jpr/Makefile test/Makefile shell/Makefile tutorials/Makefile jxta.net/Makefile jxta.net/src/Makefile jxta.net/shell/Makefile jxta.pc doxconf src/jxta_apr.h])

# Pretty Messages (idea stolen from Ethereal)

if test "x$ac_enable_debug" = "xyes" ; then
	debug_message="yes"
else
	debug_message="no"
fi

if test "x$ac_enable_debug" = "xyes" ; then
	debug_message="yes"
else
	debug_message="no"
fi

echo ""
echo "JXTA has been configured with the following options:"
echo "                  Debug enabled : $debug_message"
echo "                  Compression enabled : $ac_enable_compression"
echo "                  Decompression enabled : $ac_enable_decompression"
echo "                  Mono support enabled : $ac_enable_mono"
echo "                  libxml2 Path : $xml2_prefix"
echo "                  APR Path : $apr_prefix"
echo "                  APU Path : $apu_prefix"
echo "                  sqlite Path : $sqlite_prefix"
echo "                  openssl Path : $openssl_prefix"
if test "x$apr_threadpool" = "x1" ; then
echo "                  Thread pool availability: apr"
else
echo "                  Thread pool availability: jxta/jpr"
fi

