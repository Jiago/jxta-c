diff -Nwudr -x libtool -x Makefile -x Makefile.in -x configure -x config.sub -x config.status -x config.log -x aclocal.m4 -x config.h libxml2-2.6.19-orig/autogen.sh libxml2-2.6.19/autogen.sh
--- libxml2-2.6.19-orig/autogen.sh	1969-12-31 16:00:00.000000000 -0800
+++ libxml2-2.6.19/autogen.sh	2005-04-11 14:14:14.112663000 -0700
@@ -0,0 +1,114 @@
+#!/bin/sh
+
+RECOMMENDED_AUTOCONF_VER=2.59
+REQUIRED_AUTOCONF_VER=2.53
+RECOMMENDED_AUTOMAKE_VER=1.9
+REQUIRED_AUTOMAKE_VER=1.7
+RECOMMENDED_LIBTOOL_VER=1.4.3
+REQUIRED_LIBTOOL_VER=1.3.5
+
+AM_PROGS="automake-1.7 automake-1.8 automake-1.9 automake"
+AC_PROGS="autoconf2.5x autoconf"
+
+# compare 2 versions 
+# return true if $1 is later than $2
+ver_compare() {
+    cur_ver=$1
+    min_ver=$2
+    result=0
+    saved_IFS="$IFS"; IFS="."
+    set $min_ver
+    for x in $cur_ver; do
+        y=$1; shift;
+        if [ -z "$x" ]; then result=1; break; fi
+        if [ -z "$y" ]; then break; fi
+        if [ $x -gt $y ]; then break; fi
+        if [ $x -lt $y ]; then result=1; break; fi
+    done
+    IFS="$saved_IFS"
+    return $result
+}
+
+# Check program is later then version
+# Usage: ver_check PROG RECOMMENDED_VER MINIMUM_VER
+ver_check() {
+    vc_prog=$1
+    vc_r_ver=$2
+    vc_min_ver=$3
+    vc_result=1
+
+    echo "checking if $vc_prog >= $vc_r_ver ..."
+    vc_prog_ver=`$vc_prog --version | head -n 1 | \
+                           sed 's/^.*[ \t]\([0-9.]*\).*$/\1/'`
+    if ver_compare $vc_prog_ver $vc_r_ver; then
+        echo "found $vc_prog_ver"
+        vc_result=0
+    elif [ -n "$vc_min_ver" ] && ver_compare $vc_prog_ver $vc_min_ver; then
+        echo "found $vc_prog_ver is OK, but $vc_r_ver is recommended"
+        vc_result=0
+    else
+        echo "ERROR: too old (found version $vc_prog_version)"
+    fi
+    return $vc_result
+}
+
+# Pick the program in preference, the first meet minimum version 
+# requirement will be picked.
+# Usage: prog_pick PROG_VAR PROG_LIST RECOMMEND_VER MINIMUM_VER
+prog_pick() {
+    prog_var=$1
+    vc_result=1
+
+    for prog in $2; do
+        if $prog --version < /dev/null > /dev/null 2>&1; then
+            if ver_check $prog $3 $4; then
+                eval "$prog_var=$prog"
+                vc_result=0
+                break;
+            fi
+        fi
+    done
+    if [ "$vc_result" != 0 ]; then
+        echo ""
+        echo "*ERROR*: You must have $prog >= $3 installed"
+        echo "  to build jxta-c."
+        echo ""
+    fi
+    return $vc_result
+}
+
+DIE=0
+
+ver_check libtoolize $RECOMMENDED_LIBTOOL_VER $REQUIRED_LIBTOOL_VER || DIE=1
+prog_pick AUTOMAKE "$AM_PROGS" $RECOMMENDED_AUTOMAKE_VER $REQUIRED_AUTOMAKE_VER || DIE=1
+prog_pick AUTOCONF "$AC_PROGS" $RECOMMENDED_AUTOCONF_VER $REQUIRED_AUTOCONF_VER || DIE=1
+ACLOCAL=`echo $AUTOMAKE | sed s/automake/aclocal/`
+AUTOHEADER=`echo $AUTOCONF | sed s/autoconf/autoheader/`
+
+#ver_check autoconf $RECOMMENDED_AUTOCONF_VER $REQUIRED_AUTOCONF_VER || DIE=1
+#ver_check automake $RECOMMENDED_AUTOMAKE_VER $REQUIRED_AUTOMAKE_VER || DIE=1
+
+if [ "$DIE" -eq 1 ]; then
+    exit 1
+fi
+
+if [ ! -d conftools ]; then
+    mkdir conftools
+fi
+
+echo "Running libtoolize ..." 
+libtoolize --force --automake
+echo "Running $ACLOCAL ..." 
+$ACLOCAL $ACLOCAL_FLAGS || exit;
+echo "Running $AUTOHEADER ..." 
+$AUTOHEADER || exit;
+echo "Running $AUTOMAKE first round ..." 
+$AUTOMAKE --add-missing --copy
+echo "Running $AUTOCONF ..." 
+$AUTOCONF || exit;
+echo "Running $AUTOMAKE second round ..." 
+$AUTOMAKE
+PREFIX=`pwd`
+COMMAND="./configure --prefix=$PREFIX/xmlinst"
+$COMMAND || exit
+exit
diff -Nwudr -x libtool -x Makefile -x Makefile.in -x configure -x config.sub -x config.status -x config.log -x aclocal.m4 -x config.h libxml2-2.6.19-orig/xmlstring.c libxml2-2.6.19/xmlstring.c
--- libxml2-2.6.19-orig/xmlstring.c	2005-04-01 05:15:10.000000000 -0800
+++ libxml2-2.6.19/xmlstring.c	2005-04-11 14:13:27.703756294 -0700
@@ -12,15 +12,19 @@
  *
  * daniel@veillard.com
  */
-
+#define JXTA_WILDCARD
 #define IN_LIBXML
 #include "libxml.h"
 
 #include <stdlib.h>
 #include <string.h>
+#ifdef HAVE_CTYPE_H
+#include <ctype.h>
+#endif
 #include <libxml/xmlmemory.h>
 #include <libxml/parserInternals.h>
 #include <libxml/xmlstring.h>
+#define JXTA_WILDCARD
 
 /************************************************************************
  *                                                                      *
@@ -141,18 +145,52 @@
     } while (*str2++ != 0);
     return 0;
 }
-
+#ifdef JXTA_WILDCARD
 /**
- * xmlStrEqual:
- * @str1:  the first xmlChar *
- * @str2:  the second xmlChar *
- *
- * Check if both string are equal of have same content
- * Should be a bit more readable and faster than xmlStrEqual()
- *
- * Returns 1 if they are equal, 0 if they are different
+* Add a wild card search for string comparisons
+* Wild card supported is of patterns
+*         * - all strings match
+*         *abc - ends with abc
+*         abc* - starts with abc
+*         a?c - contains any character between a and c
  */
+int
+xmlStrEqualWc(const xmlChar * pattern, const xmlChar * str) {
+    int sl;
+    int skip = 0;
+/*    printf("comp:%s :: %s\n", pattern, str);    */
+    if (pattern == str) return(1);
+    if (pattern == NULL) return(0);
+    if (str == NULL) return(0);
+     do {
+       switch (*pattern) {
+           case '*':
+	       for (;*pattern;) { 
+	           pattern++;
+		   if (*pattern == '\0') return(1);
+		   sl = strlen((const char *)str);
+		   for (; *str != '\0'; ) {
+	               if (xmlStrEqualWc(pattern,str++)) return (1); 
+		   }
+	           return (0);
+	       }
+	       break;
+	   case '?':
+	       pattern++;
+	       str++;
+	       skip = 1;
+	       break;
+       }
+       if (!skip) {
+           if (toupper(*pattern++) != toupper(*str++)) return (0);
+       }
+       skip = 0;
+    } while (*str) ;
+    if (*pattern != '\0' && *pattern != '*') return (0);
+    return (1);
+}
 
+#endif
 int
 xmlStrEqual(const xmlChar *str1, const xmlChar *str2) {
     if (str1 == str2) return(1);
@@ -163,7 +201,6 @@
     } while (*str2++);
     return(1);
 }
-
 /**
  * xmlStrQEqual:
  * @pref:  the prefix of the QName
@@ -206,6 +243,10 @@
 xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len) {
     register int tmp;
 
+    if (*str1 == '*' || *str2 == '*') {
+    	printf("strncompare:%s :: %s \n", str1, str2); 
+    }
+
     if (len <= 0) return(0);
     if (str1 == str2) return(0);
     if (str1 == NULL) return(-1);
diff -Nwudr -x libtool -x Makefile -x Makefile.in -x configure -x config.sub -x config.status -x config.log -x aclocal.m4 -x config.h libxml2-2.6.19-orig/xpath.c libxml2-2.6.19/xpath.c
--- libxml2-2.6.19-orig/xpath.c	2005-04-01 05:15:10.000000000 -0800
+++ libxml2-2.6.19/xpath.c	2005-04-11 14:26:16.760375679 -0700
@@ -14,6 +14,8 @@
  *
  */
 
+#define JXTA_WILDCARD
+
 #define IN_LIBXML
 #include "libxml.h"
 
@@ -4506,14 +4508,25 @@
         return (0);
     hash = xmlXPathStringHash(str);
     for (i = 0; i < ns->nodeNr; i++) {
+    
+#ifndef JXTA_WILDCARD
         if (xmlXPathNodeValHash(ns->nodeTab[i]) == hash) {
             str2 = xmlNodeGetContent(ns->nodeTab[i]);
             if ((str2 != NULL) && (xmlStrEqual(str, str2))) {
+#else
+        if (1) {
+            str2 = xmlNodeGetContent(ns->nodeTab[i]); 
+            if ((str2 != NULL) && (xmlStrEqualWc(str, str2))) { 
+#endif
                 xmlFree(str2);
 		if (neq)
 		    continue;
                 return (1);
+#ifndef JXTA_WILDCARD
 	    } else if ((str2 == NULL) && (xmlStrEqual(str, BAD_CAST ""))) {
+#else
+	    } else if ((str2 == NULL) && (xmlStrEqualWc(str, BAD_CAST ""))) { 
+#endif
 		if (neq)
 		    continue;
                 return (1);
