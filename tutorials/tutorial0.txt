Original  20041029 brent


Tutorial 0: Instantiating the NetPeerGroup and Printing Some Information

This tutorial uses the following files:

jxta_tutorial_main.c
jxta_tutorial0.c
jxta_tutorial_shared.h
jxta_tutorial_shared.c

[Makefile -- not done]


JXTA-C Tutorial 0: Basics

Introduction

This is the first in (hopefully) a series of tutorials meant to
demonstrate the jxta-c library. jxta-c is a C implementation of the
JXTA protocols as defined by the working group (?), and found at
http://www.jxta.org. There should be a general introduction to the
tutorials, and if so, that should be read first.

Tutorial 0 provides some bare basics: enough to show how to use
objects, activate and deactivate the library, connect to the network,
and print some status information. For the last bit, some generic
functions are used from the included shared file
jxta_tutorial_shared.c.


Code Layout 

Process Arguments - no arguments are required or used.

Initialization - initialize the library and instantiate the
netPeerGroup object. jxta_initialize() is a cover for
apr_initialize(), which is part of the Apache Portable Runtime
library, on which jxta-c depends. (See the general introduction for
more about APR).

Program Body - print a description of the group, and the group's
advertisement. There is some redundancy here.

Cleanup - free the netPeerGroup object and deactivate the library (in
turn deactivating APR).


Creating the Net Peer Group

The netPeerGroup object is the default peer group; by instantiating
it, various events are set in motion, as described in the Tutorials
Overview. Like many functions in jxta-c, jxta_PG_new_netpg() returns a
Jxta_status result, which contains either 0 (JXTA_SUCCESS), in case of
success, or an error code starting at 12001. The error codes can be
found in jxta_errno.h, and all have symbolic representations. Common
errors are JXTA_INVALID_ARGUMENT and JXTA_TIMEOUT.

jxta_PG_new_netpg() returns the netPeerGroup object in a return value
argument. If there is an error, this value will be left
unchanged. Thus it is wise to always initialize the argument to
NULL. Likewise, most functions in jxta-c which return a service or
other object behave the same way. The main exceptions are the
constructor functions, including jstring_new_0().


Printing Description and Advertisements

The code calls two shared functions. The printGroupDescription() and
printGroupAd() functions are convenience wrappers which in turn call
functions to generate JString versions of the descriptions and ads,
respectively. The wrappers simply print the strings to stdout,
converting JStrings to standard C strings (NULL-terminated char *),
using jstring_get_string().

The wrapper functions are as expected. The groupDescription() and
groupAdString() demonstrate how to create and use JString objects,
releasing them when done. Because group objects cannot return their
advertisement in a string form directly, the code first retrieves the
group advertisement, from which it retrieves a JString version.


Cleaning up

The netPeerGroup object is released. Since we're quitting this isn't
strictly necessary on most operating systems with true memory
management, but it is good practise.

At the time of writing, jxta-c does not support shutting down and
restarting the platform (by freeing and re-instantiating the
netPeerGroup) during a single application run.


Summary

This is a simple tutorial meant to demonstrate some common techniques
and basic initialization.
