Original Document: 20041027 Brent 
Update 20041103 tra
Format and add section on Platform config configurations


JXTA-C Tutorials: Overview


Introduction

These tutorials introduce, and demonstrate the use of, various aspects
of the jxta-c libraries. jxta-c implements the JXTA protocols. For
more information, please see http://www.jxta.org and
http://jxta-c.jxta.org.

The web sites contain various content, but of particular interest are
the jxta-c implementation overview and the JXTA protocols
specification. The implementation overview introduces some of the
design aspects of the libraries. The protocols specification
describes, formally, the six protocols in the JXTA suite of protocols,
and the make-up of the advertisements and other encoded data formats
which make up the body of the representation of JXTA transmissions
between peers.

It should not be necessary to read the protocol specification in order
to understand these tutorials, or the general nature of JXTA, but it
is highly recommended to read some introductory material on the
protocols, and the jxta-c implementation overview.

The only other prerequisites to these tutorials are an intermediate
knowledge of the C language, and, tangentially, because JXTA depends
on it, an understanding of XML. It is implicit that these tutorials
are to be compiled and run, so some knowledge of your preferred
platform's tools for compiling and linking the code is also assumed,
as is the presence of compiled versions of the jxta and apr libraries.


JXTA-C Overview

For those who want a quick introduction to jxta-c, this is for you.

jxta-c loosely follows the design of the J2SE platform and Shell
projects. It uses a version of object oriented programming in C. There
are various ways of doing this, but the essential ideas are:

- objects are defined using structures whose members are made opaque
  through type definitions

- classes are defined using an object structure combined with a
  function table

- class inheritance is enabled by embedded superclass structures as
  the first member in subclass structures, and casting pointers in
  code

- a pseudo runtime is provided which depends on a root object, which
  is found in Jxta_object; most classes descend from that class;
  objects are required to support comparison operations as defined
  in jxta_object.h, and constructor/destructors.

- Functions are called indirectly, using a method table; this approach
  allows either a) separating interface from implementation, or b)
  function overloading by evaluating the arguments at runtime. jxta-c
  uses it for interface definitions, as in Java interfaces. It is also
  required to allow proper method inheritance and, ostensibly,
  overriding of superclass implementations. [Note: I haven't figured
  out if this is already used, or even supported, or not.]

- objects are reference counted; when the count reaches zero, the
  object is automatically released. Most functions which return an
  object return it with a reference count of at least
  one. Constructors return objects with a retain count of exactly 1,
  and others add 1 to the current count by calling
  JXTA_OBJECT_SHARE(), unless otherwise specified. When you are done
  using a reference counted object, unless JXTA_OBJECT_SHARE() was not
  called by the accessor function, you must call JXTA_OBJECT_RELEASE()
  when you are done with it, to avoid memory leaks.

To facilitate string handling, the JString class is used, and behaves
similarly to the Java String class. JString descends from Jxta_object.

The fundamental abstract code element in jxta-c, again like the Java
JXTA platform, is the module. Modules are the general case of the two
most important components of jxta-c: services and handlers. [Note: I
haven't found any handlers or support for them but they're big in the
J2SE version so I'm assuming...] The platform itself is primarily
composed of services. Theoretically, the user should be able to
subclass either the module or service, although I have not yet seen an
example of this, and dynamic loading of subclasses is not supported
yet. Because a fundamental aspect of JXTA is the platform-independent
specification of module interfaces, as well as their implementations
(including URIs at which to locate them) this can be seen as a
significant area of future work.

There is more-or-less a one-to-one relationship between service
advertisements as specified in the protocol and service classes
implemented in jxta-c. Each protocol has a service, but other things
are also services. Services do most of the work involving the network:
actual sending and receiving of data. Other classes are mostly just
used for encapsulating the large quantities of data used by the
libraries.

A key component of the architecture is the concept of the group, which
has some surprising characteristics. A group is a service, but it's
primary purpose is to provide access to other services. The standard
services of the protocol are available from the default group, the net
peer group, which is bootstrapped using the jxta_PG_new_npg()
function. From the group object are retrieved other service objects,
like the rendezvous service, the discovery service, and the pipe
service objects. With these (and other, included custom) service
objects, one interacts with the implementations of those services'
specifications.

The group is an organizing factor, but it does not simply organize
peers. In fact, a peer is defined as a member of a group not by any
sort of classification, but by the act of interacting with the
group. In a comprehensive JXTA implementation (jxta-c still has a ways
to go), a peer first must be authenticated for group
interactions. Successful authentication makes a peer a de facto member
of a group.

In a peer to peer architecture, the idea of reliable and comprehensive
membership roll is contradictory, as there is no central authority for
group membership. Peers themselves must define their relationships
amongst one another, by either admitting or denying communication with
other peers. Authority is thus irrelevant. If one peer wants
information held by a second peer, it must convince that peer that it
is worthy, in whatever manner, and by whatever policy, is defined by
the group.

(As jxta-c currently does not support group authentication, this might
seem moot, but it is essential to the nature of the protocols and the
design of the implementation.)

In jxta-c, instantiating the net peer group is analogous to joining
it. Any program which successfully instantiates the net peer group can
request its services, thereby interacting with the public network.

Successful instantiation of the net peer group requires proper
configuration. jxta-c and the J2SE platform use a file called
PlatformConfig, an XML document which contains various elements used
to characterize the peer so that it can operate. The most important
elements in the PlatformConfig are the Peer ID and the set of service
definitions, which include essential network address settings.

Calling jxta_PG_new_npg() results in the side effect of parsing the
PlatformConfig file in the current directory, usually the directory
containing the executable. (An exception is Mac OS X native
applications, which tend to use "/". Consult your operating system
programming guide.) You may wish to change the current directory in
your peer before calling that function if you want to specify a
different file. If the file is not found a skeleton file is produced,
which contains a new, unique Peer ID. Customize the file to suit your
environment.

Once PlatformConfig has been parsed, the net peer group will
automatically attempt to connect with the network by looking for a
rendezvous peer and/or relay peer as required. On a private subnet, if
IP Multicast is enabled, peers may also locate and communicate with
one another directly. In any case, it is at this point that
applications can perform their own tasks via the existing net peer
group services, or perhaps by creating a (possibly trivial) subgroup
and using its services. A trivial subgroup merely inherits the
services of its parent, which is specified when the group is
created. Most subgroups' parent is the net peer group.

The most important point about groups is that they control the
propagation of queries amongst peers. Usually, queries are made only
of rendezvous peers which are members of the group. If TCP/IP
multicast is enabled, queries are also propagated via multicast. A
group without a rendezvous peer is an ad-hoc group. Ad-doc groups need
the multicast transport to be enabled in order for peers to find each
other resources.  Peers can either discover the endpoint addresses of
other peers via the rendezvous service, or peers in the group need to
have the endpoint addresses of other peers hard coded into them, in
which case they can issue queries directly to those other peers, using
the discovery services of the net peer group. (A current limitation of
jxta-c is the inability of peers using the library to act as
rendezvous. Until this is implemented, it is necessary to use a J2SE
Platform peer as a rendezvous for your custom group.)


Platform configuration

See the separate file "tutorials_platform_config.txt" for an attempt at
an explanation of the structure and meaning of the elements in the
PlatformConfig files used by jxta-c programs.


Structure

Each tutorial file is simply named tutorial#.c where "#" is the
ordered number of the tutorial.

To minimize the size of the files and to allow for some amount of code
re-use, the tutorials use a library approach. All tutorials use the
same main(), which resides in jxta_tutorial_main.c.
jxta_tutorial_shared.h/c contains code which is commonly used by
multiple tutorial programs.

Each tutorial file implements four functions whose signatures appear
in jxta_tutorial_main.c: processArgs(), init(), body() and
cleanup(). Arguments from main() are passed to processArgs(); the
return from body() is returned to the operating system. Each tutorial
is effectively a singleton object, where file variables are private to
that object. This is a simplified version of the approach used in
jxtaShell, the jxta-c version of the J2SE JXTA Shell application.


Shared Functions

See the comments in the header file jxta_tutorial_shared.h for more
information.


Configuration

Perhaps since jxta-c is targeted at multiple platforms, including
embedded systems, and has no way of knowing what user interface
facilities are available (if any), configuration is mostly left up to
the developer. There is currently no way to specify a configuration in
code, short of producing and outputting a customized PlatformConfig
file prior to instantiating the netPeerGroup. Hopefully this will be
fixed soon, when someone steps up to do it.

The example PlatformConfig included with the tutorials should have
enough comments to describe what each section is for. It uses the same
format as that of the J2SE Platform project, although fewer options
are supported.

Four main network configuration modes are supported in the the
JXTA-C as in the JXTA-J2SE implementation. While configuring
a peer, a combination of these network configuration mode can be
made.

1) TCP/IP Transport 
   - Support incoming and out-going TCP/IP socket connection between
two peers

2) TCP/IP Multicast Transport
    - Support out-going and incoming TCP/IP multicast propagation
 
3) TCP Relay transport
    - Support TCP/IP out-going socket connection to a relay peer (NAT traversals)

4) HTTP relay Transport
    - Support HTTP out-going connection to an HTTP relay peer (Firewalls
 and NAT traversals)

The Tutorials

Tutorial 0: Instantiating the NetPeerGroup and Printing Some Information

[the rest are TBA]




